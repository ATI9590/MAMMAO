
robotCar2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800102  00800102  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dee  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b1  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cf  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  00002b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 34       	cpi	r26, 0x4B	; 75
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main()
{
	//pinsSetup();
	//sei();
	SoftSerialInit();
  a6:	0e 94 5f 01 	call	0x2be	; 0x2be <SoftSerialInit>
	motor_init();
  aa:	0e 94 77 00 	call	0xee	; 0xee <motor_init>
		//		case 'S':
		//		stop();
		//		break;
		//	}
		//}
		stop();
  ae:	0e 94 84 00 	call	0x108	; 0x108 <stop>
  b2:	fd cf       	rjmp	.-6      	; 0xae <main+0x8>

000000b4 <pwmSetup>:
{
    set_in1(SOFT_SPEED);
    set_in2(OFF);
    set_in3(speed);
    set_in4(OFF);
    direction = SOFTRIGHT;
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 66       	ori	r24, 0x68	; 104
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	84 b9       	out	0x04, r24	; 4
  c0:	84 b5       	in	r24, 0x24	; 36
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	84 bd       	out	0x24, r24	; 36
  c6:	84 b5       	in	r24, 0x24	; 36
  c8:	80 6a       	ori	r24, 0xA0	; 160
  ca:	84 bd       	out	0x24, r24	; 36
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	85 bd       	out	0x25, r24	; 37
  d2:	e0 eb       	ldi	r30, 0xB0	; 176
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	80 6a       	ori	r24, 0xA0	; 160
  e0:	80 83       	st	Z, r24
  e2:	e1 eb       	ldi	r30, 0xB1	; 177
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <motor_init>:
  ee:	0e 94 5a 00 	call	0xb4	; 0xb4 <pwmSetup>
  f2:	08 95       	ret

000000f4 <set_in1>:
  f4:	87 bd       	out	0x27, r24	; 39
  f6:	08 95       	ret

000000f8 <set_in2>:
  f8:	88 bd       	out	0x28, r24	; 40
  fa:	08 95       	ret

000000fc <set_in3>:
  fc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 100:	08 95       	ret

00000102 <set_in4>:
 102:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 106:	08 95       	ret

00000108 <stop>:
}


void stop()
{
    set_in1(OFF);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 7a 00 	call	0xf4	; 0xf4 <set_in1>
    set_in2(OFF);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 7c 00 	call	0xf8	; 0xf8 <set_in2>
    set_in3(OFF);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 7e 00 	call	0xfc	; 0xfc <set_in3>
    set_in4(OFF);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 81 00 	call	0x102	; 0x102 <set_in4>
    direction = STOPPED;
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	08 95       	ret

00000128 <__vector_1>:
static volatile unsigned char SoftSerialTXBitCount; // TX bit counter.
static volatile unsigned char SoftSerialRXBits;     // Storage for received bits.
static volatile unsigned char SoftSerialRXBitCount; // RX bit counter.

ISR(INT0_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31

#ifdef DBG_ENABLE
    PORTD |= (1 << DBG_PIN);
#endif

    state = RECEIVE;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>

    // Disable interrupts while receiving bits
    EIMSK &= ~(1 << INT0);
 13e:	8d b3       	in	r24, 0x1d	; 29
 140:	8e 7f       	andi	r24, 0xFE	; 254
 142:	8d bb       	out	0x1d, r24	; 29

    // Disable timer interrupts to update the registers
    TIMSK0 &= ~(1 << OCIE0A);
 144:	ee e6       	ldi	r30, 0x6E	; 110
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8d 7f       	andi	r24, 0xFD	; 253
 14c:	80 83       	st	Z, r24

    // Reset the prescaler, stopping the timer/counter
    TCCR0B &= ~((1 << CS01) | ( 1 << CS00 ));
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	8c 7f       	andi	r24, 0xFC	; 252
 152:	85 bd       	out	0x25, r24	; 37

    // This ISR takes time to execute. Compensate for this time by starting 
    // from 1, which is equal to approximately 4 us ((1/16MHz) * 64)
    TCNT0 = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	86 bd       	out	0x26, r24	; 38

    // Count 1.5 period in the future
    OCR0A = 39;
 158:	87 e2       	ldi	r24, 0x27	; 39
 15a:	87 bd       	out	0x27, r24	; 39

    // Set prescaler and start the timer/counter
    TCCR0B |= (1 << CS01) | (1 << CS00);
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	85 bd       	out	0x25, r24	; 37

    // Clear received bit counter
    SoftSerialRXBitCount = 0;
 162:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    SoftSerialRXBits = 0;
 166:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <SoftSerialRXBits>
    
    // Clear the interrupt flag and enable timer/counter interrupt
    TIFR0 |= (1 << OCF0A);
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	85 bb       	out	0x15, r24	; 21
    TIMSK0 |= (1 << OCIE0A);
 170:	80 81       	ld	r24, Z
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 83       	st	Z, r24

#ifdef DBG_ENABLE
    PORTD &= ~(1 << DBG_PIN);
#endif

}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31

#ifdef DBG_ENABLE
    PORTD |= (1 << DBG_PIN);
#endif

    switch (state) 
 198:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	39 f1       	breq	.+78     	; 0x1ee <__vector_14+0x68>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <__vector_14+0x20>
 1a4:	4d c0       	rjmp	.+154    	; 0x240 <__vector_14+0xba>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	09 f0       	breq	.+2      	; 0x1ac <__vector_14+0x26>
 1aa:	7e c0       	rjmp	.+252    	; 0x2a8 <__vector_14+0x122>
    {
    // Transmitting a byte
    case TRANSMIT:
    {
        // All bits not send?
        if(SoftSerialTXBitCount < 8 )
 1ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SoftSerialTXBitCount>
 1b0:	88 30       	cpi	r24, 0x08	; 8
 1b2:	b0 f4       	brcc	.+44     	; 0x1e0 <__vector_14+0x5a>
        {
            // Is the LSB logic 1?
            if(SoftSerialTXBits & 0x01) 
 1b4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SoftSerialTXBits>
 1b8:	80 ff       	sbrs	r24, 0
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <__vector_14+0x3e>
            {           
                SET_TX_PIN();
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <__vector_14+0x44>
            }
            else 
            {
                CLEAR_TX_PIN();
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8e 7f       	andi	r24, 0xFE	; 254
 1c8:	8b b9       	out	0x0b, r24	; 11
            }

            // Select the next bit and count the number of transmitted bits
            // LSB first
            SoftSerialTXBits = SoftSerialTXBits >> 1;
 1ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SoftSerialTXBits>
 1ce:	86 95       	lsr	r24
 1d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <SoftSerialTXBits>
            SoftSerialTXBitCount++;
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SoftSerialTXBitCount>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SoftSerialTXBitCount>
 1de:	66 c0       	rjmp	.+204    	; 0x2ac <__vector_14+0x126>
        }
        else 
        {
            // All bits transmitted, send the stop bit
            SET_TX_PIN();
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	8b b9       	out	0x0b, r24	; 11

            state = TRANSMIT_STOP_BIT;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
 1ec:	5f c0       	rjmp	.+190    	; 0x2ac <__vector_14+0x126>

    // Transmitting stop bit
    case TRANSMIT_STOP_BIT:
    {
        // More data in the buffer for transmitting?
        if(SoftSerial_TxHead != SoftSerial_TxTail)
 1ee:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <SoftSerial_TxHead>
 1f2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <SoftSerial_TxTail>
 1f6:	98 17       	cp	r25, r24
 1f8:	a9 f0       	breq	.+42     	; 0x224 <__vector_14+0x9e>
        {
            unsigned char tmptail;

            // Calculate buffer index
            tmptail = ( SoftSerial_TxTail + 1 ) & SOFTSERIAL_TX_BUFFER_MASK;
 1fa:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <SoftSerial_TxTail>
 1fe:	ef 5f       	subi	r30, 0xFF	; 255
 200:	ef 71       	andi	r30, 0x1F	; 31
        
            // Store new index
            SoftSerial_TxTail = tmptail;
 202:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <SoftSerial_TxTail>
        
            // Start transmission
            state = TRANSMIT;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
            
            // Clear the TX pin marking the beginning of the start bit
            PORTD &= ~(1 << TX_PIN);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	8b b9       	out	0x0b, r24	; 11

            // Put the byte in the TX buffer
            SoftSerialTXBits = SoftSerial_TxBuf[tmptail];
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e7 5f       	subi	r30, 0xF7	; 247
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	80 81       	ld	r24, Z
 21a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <SoftSerialTXBits>
            SoftSerialTXBitCount = 0;
 21e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <SoftSerialTXBitCount>
 222:	44 c0       	rjmp	.+136    	; 0x2ac <__vector_14+0x126>
        }
        else
        {
            // No more data in transmit buffer
            // Disable timer interrupts
            TIMSK0 &= ~(1 << OCIE0A);
 224:	ee e6       	ldi	r30, 0x6E	; 110
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	8d 7f       	andi	r24, 0xFD	; 253
 22c:	80 83       	st	Z, r24

            state = IDLE;
 22e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <state>
            
            // Reset external interrupt flag (if any) and enable external 
            // interrupt
            EIFR |= (1 << INTF0);
 232:	8c b3       	in	r24, 0x1c	; 28
 234:	81 60       	ori	r24, 0x01	; 1
 236:	8c bb       	out	0x1c, r24	; 28
            EIMSK |= (1 << INT0);
 238:	8d b3       	in	r24, 0x1d	; 29
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	8d bb       	out	0x1d, r24	; 29
 23e:	36 c0       	rjmp	.+108    	; 0x2ac <__vector_14+0x126>

    // Receiving a byte
    case RECEIVE:
    {
        // Count 1 period in the future
        OCR0A = 25;
 240:	89 e1       	ldi	r24, 0x19	; 25
 242:	87 bd       	out	0x27, r24	; 39
        
        // Not all bits received (LSB first)?
        if(SoftSerialRXBitCount < 8) 
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 248:	88 30       	cpi	r24, 0x08	; 8
 24a:	90 f4       	brcc	.+36     	; 0x270 <__vector_14+0xea>
        {
            // Select the next bit position
            SoftSerialRXBitCount++;
 24c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
            SoftSerialRXBits = SoftSerialRXBits >> 1;
 256:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SoftSerialRXBits>
 25a:	86 95       	lsr	r24
 25c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SoftSerialRXBits>

            // Is the RX pin set?
            if(GET_RX_PIN() != 0)
 260:	4f 9b       	sbis	0x09, 7	; 9
 262:	24 c0       	rjmp	.+72     	; 0x2ac <__vector_14+0x126>
            {
                // Also set the current bit position
                SoftSerialRXBits |= 0x80;
 264:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SoftSerialRXBits>
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SoftSerialRXBits>
 26e:	1e c0       	rjmp	.+60     	; 0x2ac <__vector_14+0x126>
        }
        else 
        {
            // All bits received
            // Disable timer/counter interrupt
            TIMSK0 &= ~(1 << OCIE0A);
 270:	ee e6       	ldi	r30, 0x6E	; 110
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	80 83       	st	Z, r24

            // Reset external interrupt flag (if any) and enable external
            // interrupt
            EIFR |= (1 << INTF0);
 27a:	8c b3       	in	r24, 0x1c	; 28
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	8c bb       	out	0x1c, r24	; 28
            EIMSK |= (1 << INT0);
 280:	8d b3       	in	r24, 0x1d	; 29
 282:	81 60       	ori	r24, 0x01	; 1
 284:	8d bb       	out	0x1d, r24	; 29

            unsigned char tmphead;
    
            // Calculate buffer index
            tmphead = (SoftSerial_RxHead + 1) & SOFTSERIAL_RX_BUFFER_MASK;
 286:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SoftSerial_RxHead>
 28a:	ef 5f       	subi	r30, 0xFF	; 255
 28c:	ef 71       	andi	r30, 0x1F	; 31
    
            // Store new index
            SoftSerial_RxHead = tmphead;
 28e:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <SoftSerial_RxHead>
    
            if (tmphead == SoftSerial_RxTail)
 292:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <SoftSerial_RxTail>
            {
                // ERROR! Receive buffer overflow
            }
    
            // Store received data in buffer
            SoftSerial_RxBuf[tmphead] = SoftSerialRXBits;
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SoftSerialRXBits>
 29c:	e5 5d       	subi	r30, 0xD5	; 213
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	80 83       	st	Z, r24

            state = IDLE;
 2a2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <state>
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__vector_14+0x126>
    break;
    default:        
    {
        // Error, unknown state
        // Return to known state
        state = IDLE;
 2a8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <state>

#ifdef DBG_ENABLE
    PORTD &= ~(1 << DBG_PIN);
#endif

}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <SoftSerialInit>:

void SoftSerialInit(void)
{
    // Flush buffers
    char  x = 0;
    SoftSerial_RxTail = x;
 2be:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <SoftSerial_RxTail>
    SoftSerial_RxHead = x;
 2c2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <SoftSerial_RxHead>
    SoftSerial_TxTail = x;
 2c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <SoftSerial_TxTail>
    SoftSerial_TxHead = x;
 2ca:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <SoftSerial_TxHead>

    // RX pin input with pullup enabled
    DDRD &= ~(1 << RX_PIN);
 2ce:	8a b1       	in	r24, 0x0a	; 10
 2d0:	8f 77       	andi	r24, 0x7F	; 127
 2d2:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << RX_PIN);
 2d4:	8b b1       	in	r24, 0x0b	; 11
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	8b b9       	out	0x0b, r24	; 11
    
    // TX pin output and set pin high
    DDRD |= (1 << TX_PIN);
 2da:	8a b1       	in	r24, 0x0a	; 10
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << TX_PIN);
 2e0:	8b b1       	in	r24, 0x0b	; 11
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	8b b9       	out	0x0b, r24	; 11
    // - Disable interrupt
    // - CTC mode with TOP in OCR0A
    // - 64 prescaler
    // 
    // Note. At 16 MHz, the timer now counts at 250 kHz
    TIMSK0 &= ~(1 << OCIE0A);
 2e6:	ee e6       	ldi	r30, 0x6E	; 110
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8d 7f       	andi	r24, 0xFD	; 253
 2ee:	80 83       	st	Z, r24
    TCCR0A |= (1 << WGM01);
 2f0:	84 b5       	in	r24, 0x24	; 36
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1 << CS01) | (1 << CS00);
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	83 60       	ori	r24, 0x03	; 3
 2fa:	85 bd       	out	0x25, r24	; 37

    // Initialize external interrupt
    // - The falling edge of INT0 generates an interrupt request
    // - Reset interrupt flag
    // - Enable interrupt
    EICRA |= (1 << ISC01);
 2fc:	e9 e6       	ldi	r30, 0x69	; 105
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	82 60       	ori	r24, 0x02	; 2
 304:	80 83       	st	Z, r24
    EIFR |= (1 << INTF0);
 306:	8c b3       	in	r24, 0x1c	; 28
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	8c bb       	out	0x1c, r24	; 28
    EIMSK |= (1 << INT0);
 30c:	8d b3       	in	r24, 0x1d	; 29
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	8d bb       	out	0x1d, r24	; 29

    // Set initial state
    state = IDLE;
 312:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <state>
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
